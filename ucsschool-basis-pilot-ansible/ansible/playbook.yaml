---
- hosts: all
  vars_files:
    - "inventories/sample/group_vars/all.yaml"
    - "inventories/sample/group_vars/{{ hostvars[inventory_hostname]['group_names'][0] }}.yaml"
  tasks:
    - name: "Upgrade errata"
      # making a BLOCK with an ALWAYS clause really ensures passwordfile to be removed even in case of failure
      block:
        - name: "Upgrade errata | Create password tempfile"
          tempfile:
              state: "file"
          changed_when: false
          register: var_temp_file
        - name: "Upgrade errata | Copy admin PW to file"
          copy:
              dest: "{{ var_temp_file.path }}"
              content: "{{ root_password }}"
        - name: "Upgrade Errata"
          include_role:
            name: "univention.ucs_roles.univention_upgrade"
          vars:
            univention_upgrade_version: "{{ upgrade_version }}"
            univention_upgrade_reboot_after_upgrade: true
      always:
        - name: "Upgrade errata | Remove admin pw"
          file:
            dest: "{{ var_temp_file.path }}"
            state: "absent"
  tags:
    - "upgrade_errata"

# Prepare for appcenter able to install apps (works for the whole domain)
# FIXME Rework license import so it can be done manually too
- hosts: primary
  tasks:
    - name: "Install apps | Copy license"
      copy:
        dest: "/tmp/"
        src: "../files/basis-pilot.de.license.ldif"
    - name: "Install apps | Import license"
      command: "univention-license-import /tmp/basis-pilot.de.license.ldif"

# With the requirement 'join other roles after @school is fully configured on master' we have to do this
# before anything else. For better distinction what we're doing right now, we make two plays: one for
# installing, and one for configuring.
- hosts: primary
  vars_files:
    - "inventories/sample/group_vars/all.yaml"
    - "inventories/sample/group_vars/primary.yaml"
  tasks:
    - name: "Install ucs@school"
      block:
        - name: "Install ucs@school | Create password tempfile"
          tempfile:
            state: "file"
          changed_when: false
          register: var_temp_file
        - name: "Install ucs@school | Copy admin PW to file"
          copy:
            dest: "{{ var_temp_file.path }}"
            content: "{{ root_password }}"
        - name: "Install ucs@school | Install Packages"
          include_role:
            name: "univention.ucs_roles.install_packages"
          vars:
            install_packages_temp_pw_file: "{{ var_temp_file }}"
            install_packages_force_package_upgrade: "{{ force_package_upgrade }}"
            # only this one.
            install_packages_install_apps: ["ucsschool"]
      always:
        - name: "Install ucs@school | Remove admin pw"
          file:
            dest: "{{ var_temp_file.path }}"
            state: "absent"
  tags:
    - "install_apps_install_ucsschool"

- hosts: primary
  vars_files:
    - "inventories/sample/group_vars/all.yaml"
    - "inventories/sample/group_vars/primary.yaml"
  tasks:
    # NOTE we don't let it fail: so we have a chance to process (and print!) the result
    # FIXME: this task would make sense to be refactored in an ucs_call_umcp role or similar
    - name: "Configure ucs@school | Invoke configuration"
      ansible.builtin.uri:
        # this request will be executed at the target
        url: "https://127.0.0.1/univention/command/schoolinstaller/install"
        method: 'POST'
        validate_certs: false
        url_username: "Administrator"
        url_password: "univention"
        force_basic_auth: true
        body_format: 'json'
        body:
          options: "{{ global.school_parameters|default({})|combine(school_parameters|default({})) }}"
      register: config_result
      failed_when: false
    # when failed: print full result and fail.
    - name: "Configure ucs@school | Print configuration result on failure"
      ansible.builtin.debug:
        msg: "{{ config_result }}"
      failed_when: config_result['status']|int != 200 or config_result['json']['status']|int != 200
      # Comment this away to print the result even when it did not fail
      when: config_result['status']|int != 200 or config_result['json']['status']|int != 200
    - name: "Configure ucs@school | Wait for configuration to finish"
      ansible.builtin.uri:
        url: "https://127.0.0.1/univention/command/schoolinstaller/progress?preventCache={{ now()|regex_replace('[^0-9]','_') }}"
        method: 'POST'
        validate_certs: false
        url_username: "Administrator"
        url_password: "univention"
        force_basic_auth: true
        headers:
          Content-Type: 'application/json'
          X-Xsrf-Protection: "{{ config_result['cookies']['UMCSessionId'] }}"
          Cookie: "{{ config_result['cookies_string'] }}"
        body: '{"options":{}}'
      register: wait_result
      until: wait_result['status']|int != 200 or wait_result['json']['status']|int != 200 or wait_result['json']['result']['finished']
      # This checks every 15 secs, and limits the overall time to three hours
      delay: 15
      retries: 720
      # FIXME: docs say we should even reboot the primary after this!
    # FIXME: this should print only relevant fields of the result: percentage, last executed step, result code
    # or even better: do not print anything when we're sure it works!
    - name: "Configure ucs@school | Print last result"
      ansible.builtin.debug:
        msg: "{{ wait_result }}"
  tags:
    - "install_apps_configure_ucsschool"

# We need the state 'jenkins finished, @school installed and configured to see WHY the join of backup fails.
# So force it to fail, draw snapshots, and then start analyzing.
- hosts: all
  tasks:
    - name: "Stop processing"
      ansible.builtin.debug:
        msg: "Stopping here."
      failed_when: true

# Jenkins job does not do the join for non-master roles (yes: run_setup_join_on_non_master_roles does not do that)
# So we have to ensure join now, right before trying to install apps.
- hosts: all:!primary
  vars_files:
    - "inventories/sample/group_vars/all.yaml"
    - "inventories/sample/group_vars/{{ hostvars[inventory_hostname]['group_names'][0] }}.yaml"
  tasks:
    - name: "Join system into domain"
      ansible.builtin.include_role:
        name: "univention.ucs_roles.ucs_join"
      vars:
        ucs_join_network_config_type: "{{ interface_mode }}"
        ucs_join_network_config_interface: "{{ interface_name }}"
        ucs_join_network_config_static_dns_servers:
          - "{{ primary_ip }}"
        ucs_join_server_type: "{{ server_role }}"
        ucs_join_master_server: "{{ primary_ip }}"
        ucs_join_admin_user_name: "Administrator"
        ucs_join_root_password: "{{ root_password }}"
        ucs_join_hostname: "{{ ansible_facts.hostname }}"
        ucs_join_domain_name: "{{ domainname }}"
        ucs_join_basedn: "{{ ldap_base }}"
  tags:
    - "join_non_master_hosts"

# This is (nearly) a code copy of 'install apps' above. Applicable to all roles, and will install
# all software required on all roles.
- hosts: all
  vars_files:
    - "inventories/sample/group_vars/all.yaml"
    - "inventories/sample/group_vars/{{ hostvars[inventory_hostname]['group_names'][0] }}.yaml"
  tasks:
    - name: "Install apps"
      block:
        - name: "Install apps | Create password tempfile"
          tempfile:
            state: "file"
          changed_when: false
          register: var_temp_file
        - name: "Install apps | Copy admin PW to file"
          copy:
            dest: "{{ var_temp_file.path }}"
            content: "{{ root_password }}"
        - name: "Install apps | Install Packages"
          include_role:
            name: "univention.ucs_roles.install_packages"
          vars:
            install_packages_temp_pw_file: "{{ var_temp_file }}"
            install_packages_force_package_upgrade: "{{ force_package_upgrade }}"
            # global apps before host-specific ones
            install_packages_install_apps: "{{ global.install_apps|default([]) + install_apps|default([]) }}"
      always:
        - name: "Install apps | Remove admin pw"
          file:
            dest: "{{ var_temp_file.path }}"
            state: "absent"
  tags:
    - "install_additonal_apps"
